package com.company.epam.part2;


import java.util.Scanner;

import static com.company.epam.part2.Part2.*;

public class Main2 {
    public static void main(String[] args) {

        //Одномерные массивы
        // 1. В массив A [N] занесены натуральные числа. Найти сумму тех элементов, которые кратны данному К.
        int a[] = {1, 2, 3, 4, 8};
        func1(a, 2);

//2. Дана последовательность действительных чисел а1 ,а2 ,..., ап. Заменить все ее члены, большие данного Z, этим
//числом. Подсчитать количество замен.
        double[] d1 = {1.5, 6.5, 9, 2, 4};
        func2(d1, 5);
//       3. Дан массив действительных чисел, размерность которого N. Подсчитать, сколько в нем отрицательных,
//       положительных и нулевых элементов.
        double[] d2 = {-1.5, 6, 9, 0, 4, 0, 10, -5};
        int N = d2.length;
        func3(d2, N);
//        4. Даны действительные числа а1 ,а2 ,..., аn . Поменять местами наибольший и наименьший элементы.
        double[] ar1 = {-1.5, 6, -9, 0, 4, 0, -10, -5};
        func4(ar1);
        // 5.Даны целые числа а1 ,а2 ,..., аn . Вывести на печать только те числа, для которых аi > i.
        int[] ar2 = {1, 2, -3, -4, 8};
        func5(ar2);
//        6. Задана последовательность N вещественных чисел. Вычислить сумму чисел, порядковые номера которых
//        являются простыми числами
        int[] ar3 = {1, 2, 3, 5, 8, 10};
        func6(ar3);
// 7. Даны действительные числа a1 a2... an. Найти max(a1 + a2n a2 + a2n−1 ... an + an+1)
        double[] ar4 = {1, 200, 5, 2, 4, 100, 10, 3, 9, 10};
        func7(ar4);
//      8. Дана последовательность целых чисел. Образовать новую последовательность, выбросив из
//        исходной те члены, которые равны min.
        int[] ar5 = {1, 2, 3, 5, -8, 1, 1, 0, -1, -6};
        func8(ar5);
//      9. В массиве целых чисел с количеством элементов n найти наиболее часто встречающееся число. Если таких
//        чисел несколько, то определить наименьшее из них.
        int[] ar6 = {1, 2, 1, 5, -8, 1, 1, 0, -1, -6};
        func9(ar6);
//    10. Дан целочисленный массив с количеством элементов n. Сжать массив, выбросив из него каждый второй
//        элемент (освободившиеся элементы заполнить нулями). Примечание. Дополнительный массив не использовать.
        int[] ar7 = {1, 2, 1, 5, -8, 1, 1, 0, -1, -6};
        func10(ar7);

//    Массивы массивов
//        1. Дана матрица. Вывести на экран все нечетные столбцы, у которых первый элемент больше последнего.
        int[][] matrix1 = {{1, 5, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, 1, 2, 5}, {1, 1, 1, 2, 1}};
        func11(matrix1);
//        2. Дана квадратная матрица. Вывести на экран элементы, стоящие на диагонали.
        int[][] matrix2 = {{1, 5, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, 1, 2, 5}, {1, 10, 1, 2, 1},{1, 1, 1, 2, 5}};
        func12(matrix2);
//        3. Дана матрица. Вывести k-ю строку и p-й столбец матрицы.
        int[][] matrix3 = {{1, 5, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, 1, 2, 5}, {1, 10, 1, 2, 1},{1, 1, 1, 2, 5}};
        func13(matrix3,2,4);
//        4. Сформировать квадратную матрицу порядка n по заданному образцу(n - четное):
        int size1 = 4;
        func14(size1);
//        5. Сформировать квадратную матрицу порядка n по заданному образцу(n - четное):
        int size2 = 6;
        func15(size2);
//        6. Сформировать квадратную матрицу порядка n по заданному образцу(n - четное):
        int size3 = 10;
        func16(size3);
//        7. Сформировать квадратную матрицу порядка N по правилу:
//        и подсчитать количество положительных элементов в ней.
        int size4 = 3;
        func17(size4);
//        8. В числовой матрице поменять местами два столбца любых столбца, т. е. все элементы одного столбца поставить
//        на соответствующие им позиции другого, а его элементы второго переместить в первый. Номера столбцов вводит
//        пользователь с клавиатуры.
        int[][] matrix4 = {{1, 5, 5, 1, 3}, {1, 2, 7, 2, 6}, {1, 1, 1, 2, 5}, {1, 10, 6, 2, 1},{1, 1, 8, 2, 5}};
        Scanner in1 = new Scanner(System.in);
        System.out.print("Введите номер первого столбца:");
        int col1 = in1.nextInt();
        Scanner in2 = new Scanner(System.in);
        System.out.print("Введите номер второго столбца:");
        int col2 = in2.nextInt();
        func18(matrix4,col1,col2);
//        9. Задана матрица неотрицательных чисел. Посчитать сумму элементов в каждом столбце. Определить, какой
//        столбец содержит максимальную сумму.
        int[][] matrix5 = {{1, 5, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, 1, 2, 5}, {1, 10, 1, 2, 1},{1, 1, 1, 2, 5}};
        func19(matrix5);
//        10. Найти положительные элементы главной диагонали квадратной матрицы.
        int[][] matrix6 = {{1, 5, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, -10, 2, 5}, {1, 10, 1, 2, 1},{1, 1, 1, 2, 5}};
        func20(matrix6);
//        11. Матрицу 10x20 заполнить случайными числами от 0 до 15. Вывести на экран саму матрицу и номера строк, в
//        которых число 5 встречается три и более раз.
        int[][] matrix7= new int[10][20];
        func21(matrix7);
//        12. Отсортировать строки матрицы по возрастанию и убыванию значений элементов.
        int[][] matrix8 = new int[4][6];
        func22(matrix8);
//        13. Отсотрировать стобцы матрицы по возрастанию и убыванию значений эементов.
        int[][] matrix9 = new int[5][4];
        func23(matrix9);
//        14. Сформировать случайную матрицу m x n, состоящую из нулей и единиц, причем в каждом столбце число
//        единиц равно номеру столбца.
          func24(5,6);
//        15. Найдите наибольший элемент матрицы и заменить все нечетные элементы на него.
        int[][] matrix10 = {{1, 4, 5, 1, 3}, {1, 2, 1, 2, 6}, {1, 1, -10, 2, 5}, {1, 10, 1, 2, 1},{1, 1, 1, 2, 5}};
        func25(matrix10);
//        16. Магическим квадратом порядка n называется квадратная матрица размера nxn, составленная из чисел 1, 2, 3,
//... n2  так, что суммы по каждому столбцу, каждой строке и каждой из двух больших диагоналей равны между
//        собой. Построить такой квадрат. Пример магического квадрата порядка 3:
//        6 1 8
//        7 5 3
//        2 9 4
        func26(4);

//        Одномерные массивы. Сортировки
//        1. Заданы два одномерных массива с различным количеством элементов и натуральное число k. Объединить их в
//        один массив, включив второй массив между k-м и (k+1) - м элементами первого, при этом не используя
//
        int A[] = {1, 2, 3, 4, 8};
        int B[] = {4, 5, 1, 3};
        func27(A, B,2);
//        2. Даны две последовательности. Образовать из них новую последовательность
//        чисел так, чтобы она тоже была неубывающей. Примечание. Дополнительный массив не использовать.
        int ar8[] = {1, 2, 3, 4, 8};
        int ar9[] = {4, 5, 1, 3};
        func28(ar8,ar9);
//        3. Сортировка выбором. Дана последовательность чисел.Требуется переставить элементы так,
//        чтобы они были расположены по убыванию. Для этого в массиве, начиная с первого, выбирается наибольший
//        элемент и ставится на первое место, а первый - на место наибольшего. Затем, начиная со второго, эта процедура
//        повторяется.
        int ar10[] = {1, 2, 6, 7, 3, 4, 8, 5, 9};
        func29(ar10);
//        4. Сортировка обменами. Дана последовательность чисел.Требуется переставить числа в
//        порядке возрастания. Для этого сравниваются два соседних числа. Если, то делается
//        перестановка. Так продолжается до тех пор, пока все элементы не станут расположены в порядке возрастания.
//        Составить алгоритм сортировки, подсчитывая при этом количества перестановок.
        int ar11[] = {1, 2, 6, 7, 3, 4, 8, 5, 10, 9};
        func30(ar11);
//        5. Сортировка вставками. Дана последовательность чисел. Требуется переставить числа в порядке
//        возрастания. Делается это следующим образом. Пусть - упорядоченная последовательность Берется следующее
//                число и вставляется в последовательность так, чтобы новая последовательность была тоже возрастающей.
//                Процесс производится до тех пор, пока все элементы не будут перебраны. Примечание.
//                Место помещения очередного элемента в отсортированную часть производить
//        с помощью двоичного поиска. Двоичный поиск оформить в виде отдельной функции
        int ar12[] = {1, 2, 6, 7, 3, 4, 8, 5, 10, 11, 9};
        func31(ar12);
//        6. Сортировка Шелла.
        int ar13[] = {1, 2, 12, 6, 7, 3, 4, 8, 5, 10, 11, 9};
        func32(ar13);
//        7. Пусть даны две неубывающие последовательности действительных чисел.
//    Требуется указать те места, на которые нужно вставлять элементы последовательности
//    в первую последовательность так, чтобы новая последовательность оставалась возрастающей.
        int ar14[] = {1, 2, 3, 4, 8};
        int ar15[] = {5, 6, 7, 9, 10};
        func33(ar14,ar15);

//        Декомпозиция с использованием методов (подпрограммы)
//        1. Написать метод(методы) для нахождения наибольшего общего делителя и наименьшего общего кратного двух
//        натуральных чисел.
        int numA = 40;
        int numB = 15;
        greatestCommonDivisor(numA,numB);
        smallestCommonMultiple(numA,numB);
//        2. Написать метод(методы) для нахождения наибольшего общего делителя четырех натуральных чисел.
        int num1 = 60;
        int num2 = 96;
        int num3 = 12;
        int num4 = 24;
        greatestCommonDivisor4(num1,num2,num3,num4);
//        3. Вычислить площадь правильного шестиугольника со стороной а, используя метод вычисления площади
//        треугольника.
        int side = 5;
    areaOfTheTriangle(side);
//        4. На плоскости заданы своими координатами n точек. Написать метод(методы), определяющие, между какими
//        из пар точек самое большое расстояние. Указание. Координаты точек занести в массив.
        int[][] matrix11 = {{4, 5}, {1, 2}, {1, 5}, {3, 4},{2, 20}};
        // первый столбец - координата Х, второй столбец - координата Y
        maxDistanceBetweenPoints(matrix11);
//        5. Составить программу, которая в массиве A[N] находит второе по величине число (вывести на печать число,
//        которое меньше максимального элемента массива, но больше всех других элементов).
        int ar16[] = {5, 6, 7, 9, 10,1,2};
        secondMax(ar16);
//        6. Написать метод(методы), проверяющий, являются ли данные три числа взаимно простыми.
        int numA6 = 16;
        int numB6 = 14;
        int numC6 = 11;
        mutuallyPrimeNumbers(numA6, numB6, numC6);
//        7. Написать метод(методы) для вычисления суммы факториалов всех нечетных чисел от 1 до 9.
        int factorial = 1;
        sumFactorial(factorial);
//        8. Задан массив D. Определить следующие суммы: D[l] + D[2] + D[3]; D[3] + D[4] + D[5]; D[4] +D[5] +D[6].
//        Пояснение. Составить метод(методы) для вычисления суммы трех последовательно расположенных элементов
//        массива с номерами от k до m.
        int numK = 3;
        int numM = 7;
        int ar17[] = {1, 2, 12, 6, 7, 3, 4, 8, 5, 10, 11, 9};
        anArrayOfAmounts(numK, numM, ar17);
//        9. Даны числа X, Y, Z, Т — длины сторон четырехугольника. Написать метод(методы) вычисления его площади,
//        если угол между сторонами длиной X и Y— прямой.
        int sideA = 6;
        int sideB = 10;
        int sideC = 11;
        int sideD = 12;
        squareQuadrilateral(sideA,sideB,sideC,sideD);
//        10. Дано натуральное число N. Написать метод(методы) для формирования массива, элементами которого
//      являются цифры числа N.
        int num10 = 3805875;
        arrayOfNumbers(num10);
//        11. Написать метод(методы), определяющий, в каком из данных двух чисел больше цифр.
        int num11_1 = 1200;
        int num11_2 = -150;
        numberOfDigits(num11_1, num11_2);
//        12. Даны натуральные числа К и N. Написать метод(методы) формирования массива А, элементами которого
//        являются числа, сумма цифр которых равна К и которые не большее N.
        int numK12 = 12;
        int numN12 = 100;
        newArray(numN12, numK12);
//        13. Два простых числа называются «близнецами», если они отличаются друг от друга на 2 (например, 41 и 43).
//        Найти и напечатать все пары «близнецов» из отрезка [n,2n], где n - заданное натуральное число больше 2. Для
//        решения задачи использовать декомпозицию.
        int number = 10;
        createAnArrayOfArrays(number);
//        14. Натуральное число, в записи которого n цифр, называется числом Армстронга, если сумма его цифр,
//        возведенная в степень n, равна самому числу. Найти все числа Армстронга от 1 до k. Для решения задачи
//        использовать декомпозицию.
        int numK14 = 10000;
        System.out.print("Список чисел Армстронга от 1 до " + numK + ": ");
        for (int i = 1; i < numK14; i++) {
            if (sumOfOddNumbers14(arrayOfNumbers14(i)) == i) {
                System.out.print(i + ", ");
            }
        }

//        15. Найти все натуральные n-значные числа, цифры в которых образуют строго возрастающую
//        последовательность (например, 1234, 5789). Для решения задачи использовать декомпозицию.
        int num15 = 4; //количество цифр в числе, num должно быть не меньше 2
        increasingSequence15(num15, array15(num15));
//        16. Написать программу, определяющую сумму n - значных чисел, содержащих только нечетные цифры.
//        Определить также, сколько четных цифр в найденной сумме. Для решения задачи использовать декомпозицию.
        int num16 = 1599; //n-значное число
        if (oddNumber16(arrayNumbers16(num16))) {
            System.out.print("Число " + num16 + " состоит из нечетных чисел, сумма цифр равна ");
            int sum16 = sumOddNumbers16(arrayNumbers16(num16));
            System.out.println(sum16);
            System.out.println("Количество четных чисел в сумме цифр числа " + num16 +
                    " равна " + numberEvenNumbers16(arrayNumbers16(sum16)));
        } else {
            System.out.println("Число " + num16 + " содержит четные числа или ноль");
        }
//        17. Из заданного числа вычли сумму его цифр. Из результата вновь вычли сумму его цифр и т.д. Сколько таких
//        действий надо произвести, чтобы получился нуль? Для решения задачи использовать декомпозицию.
        int num17 = 21;
        System.out.println("Количество вычитаний из числа " + num17 + " равно " + subtraction17(num17));
   }
}